{
  "/Users/thakur/Workspace/ppv1/time-tracker/apps/api/serverless.yml": {
    "versionFramework": "4.19.1",
    "servicePath": "/Users/thakur/Workspace/ppv1/time-tracker/apps/api/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "ppv1",
      "frameworkVersion": "4",
      "useDotenv": true,
      "provider": {
        "name": "aws",
        "profile": "pp-api",
        "runtime": "nodejs22.x",
        "region": "ap-south-1",
        "stage": "prod",
        "memorySize": 3008,
        "timeout": 31,
        "logRetentionInDays": 14,
        "httpApi": {
          "cors": true
        },
        "tracing": {
          "lambda": true
        },
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps",
          "STAGE": "prod",
          "PORT": "3001",
          "NODE_ENV": "development",
          "DATABASE_HOST": "aws-1-ap-south-1.pooler.supabase.com",
          "DATABASE_PORT": "6543",
          "DATABASE_USER": "postgres.wbqjfspfleboymnvkkte",
          "DATABASE_PASSWORD": "<REDACTED>",
          "DATABASE_NAME": "postgres",
          "JWT_SECRET": "<REDACTED>",
          "JWT_EXPIRATION": "7d",
          "SUPER_ADMIN_EMAIL": "admin@peopleparity.com",
          "SUPER_ADMIN_PASSWORD": "<REDACTED>",
          "SAML_ENTRY_POINT": "https://login.microsoftonline.com/383cc6fe-545e-4fab-8276-0c78ac6258f7/saml2",
          "SAML_ISSUER": "PeopleParity",
          "SAML_CLIENT_ID": "PeopleParity",
          "SAML_CALLBACK_URL": "http://localhost:3001/api/auth/saml/callback",
          "SAML_CERT": "-----BEGIN CERTIFICATE-----\nMIIC8DCCAdigAwIBAgIQcNr6w7TexKlOQiRcfM3EkTANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\nEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA4MjAxNzA4\nMDVaFw0yODA4MjAxNzA4MDVaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQg\nU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4B+KN+dY3vNS\nNOySyWE6KS90Eeg9TC54XpYrWZj/dKI0gtEcfvm2hSvqKfDX5pDLUBB/SOe00Gz0OELqDZ6Tgg78\nM5lyKNQHpxg7g0rnKzNpI+j2uc5gS9eMK27N1GQxpnS/GqpF3N4iXuQYP8X4s2yNTleRfmjttrHW\nf4YSlp9l5zGHjdt8cs+JaBNupcAxPKFh2vBBWkab95O+UpjsOv/E3BnIyp/+R+kXmyaHvSk5hAEG\n74UcMKmBrSUYpa0R+CTpIb6YtPMkzwYkESGoqtvQkNahaIAr0i94ZWC/H33gvaapqTO84GwUF/pJ\nzQkmCjTglK5V4OKMxuzA+N+wCQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQDGprNWc6nrUiEQmiF3\nNDgqumqmxhLafGe3iMFaEJhGkuZge4ZpiqU8AdaK6KYnvzZ8may/rm0uj5z4RIufs6hkAed0OVrC\nHTw2bVHqgwHc8iMXouy7gzz8tvn54yGq69rZkEWg3/spgvGFR1ZZudXHIPkQp5irLG9f63iyi1cF\nC2T0Wl5PgkGZVkM+s8hU0AiYshSYYd5i73IPNFEvDoLV69GqUU6RRobMUlm5oUuaNohht3+6ZRp7\ncfuxmh/dKbjYWc4jfB1/Na4YL+hmoaFRqtaY39AyLSQDkpvThq2Wgl55CbxKhlSnXlTao+4pDcBr\nXyQ9nY0Lnh+p0dOEqU8o\n-----END CERTIFICATE-----",
          "FRONTEND_URL": "http://localhost:5174"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:ListBucket"
                ],
                "Resource": "arn:aws:s3:::ppv1-screenshots-prod"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:DeleteObject"
                ],
                "Resource": "arn:aws:s3:::ppv1-screenshots-prod/*"
              }
            ]
          }
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/ppv1-prod-api",
                "RetentionInDays": 14
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "ppv1",
                          "prod",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ppv1-prod*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ppv1-prod*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:ListBucket"
                          ],
                          "Resource": "arn:aws:s3:::ppv1-screenshots-prod"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:GetObject",
                            "s3:PutObject",
                            "s3:DeleteObject"
                          ],
                          "Resource": "arn:aws:s3:::ppv1-screenshots-prod/*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "xray:PutTraceSegments",
                            "xray:PutTelemetryRecords"
                          ],
                          "Resource": [
                            "*"
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "ppv1",
                      "prod",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "ApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
                  "S3Key": "serverless/ppv1/prod/1758375569731-2025-09-20T13:39:29.731Z/ppv1.zip"
                },
                "Handler": "src/lambda.handler",
                "Runtime": "nodejs22.x",
                "FunctionName": "ppv1-prod-api",
                "MemorySize": 3008,
                "Timeout": 31,
                "TracingConfig": {
                  "Mode": "Active"
                },
                "Environment": {
                  "Variables": {
                    "NODE_OPTIONS": "--enable-source-maps",
                    "STAGE": "prod",
                    "PORT": "3001",
                    "NODE_ENV": "development",
                    "DATABASE_HOST": "aws-1-ap-south-1.pooler.supabase.com",
                    "DATABASE_PORT": "6543",
                    "DATABASE_USER": "postgres.wbqjfspfleboymnvkkte",
                    "DATABASE_PASSWORD": "<REDACTED>",
                    "DATABASE_NAME": "postgres",
                    "JWT_SECRET": "<REDACTED>",
                    "JWT_EXPIRATION": "7d",
                    "SUPER_ADMIN_EMAIL": "admin@peopleparity.com",
                    "SUPER_ADMIN_PASSWORD": "<REDACTED>",
                    "SAML_ENTRY_POINT": "https://login.microsoftonline.com/383cc6fe-545e-4fab-8276-0c78ac6258f7/saml2",
                    "SAML_ISSUER": "PeopleParity",
                    "SAML_CLIENT_ID": "PeopleParity",
                    "SAML_CALLBACK_URL": "http://localhost:3001/api/auth/saml/callback",
                    "SAML_CERT": "-----BEGIN CERTIFICATE-----\nMIIC8DCCAdigAwIBAgIQcNr6w7TexKlOQiRcfM3EkTANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\nEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA4MjAxNzA4\nMDVaFw0yODA4MjAxNzA4MDVaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQg\nU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4B+KN+dY3vNS\nNOySyWE6KS90Eeg9TC54XpYrWZj/dKI0gtEcfvm2hSvqKfDX5pDLUBB/SOe00Gz0OELqDZ6Tgg78\nM5lyKNQHpxg7g0rnKzNpI+j2uc5gS9eMK27N1GQxpnS/GqpF3N4iXuQYP8X4s2yNTleRfmjttrHW\nf4YSlp9l5zGHjdt8cs+JaBNupcAxPKFh2vBBWkab95O+UpjsOv/E3BnIyp/+R+kXmyaHvSk5hAEG\n74UcMKmBrSUYpa0R+CTpIb6YtPMkzwYkESGoqtvQkNahaIAr0i94ZWC/H33gvaapqTO84GwUF/pJ\nzQkmCjTglK5V4OKMxuzA+N+wCQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQDGprNWc6nrUiEQmiF3\nNDgqumqmxhLafGe3iMFaEJhGkuZge4ZpiqU8AdaK6KYnvzZ8may/rm0uj5z4RIufs6hkAed0OVrC\nHTw2bVHqgwHc8iMXouy7gzz8tvn54yGq69rZkEWg3/spgvGFR1ZZudXHIPkQp5irLG9f63iyi1cF\nC2T0Wl5PgkGZVkM+s8hU0AiYshSYYd5i73IPNFEvDoLV69GqUU6RRobMUlm5oUuaNohht3+6ZRp7\ncfuxmh/dKbjYWc4jfB1/Na4YL+hmoaFRqtaY39AyLSQDkpvThq2Wgl55CbxKhlSnXlTao+4pDcBr\nXyQ9nY0Lnh+p0dOEqU8o\n-----END CERTIFICATE-----",
                    "FRONTEND_URL": "http://localhost:5174"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApiLogGroup"
              ]
            },
            "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApiLambdaFunction"
                },
                "CodeSha256": "13R/YvqVKVfbv/Gnj5FJ4WVKf8ydO+GRoP9xvN2joPE="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "prod-ppv1",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "GET",
                    "POST",
                    "PUT",
                    "PATCH",
                    "HEAD",
                    "DELETE"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "ApiLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApi": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ApiLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteAnyProxyVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /{proxy+}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApi"
            },
            "HttpApiRouteAny": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "ANY /",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApi"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApi"
            },
            "ScreenshotsBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "ppv1-screenshots-prod",
                "PublicAccessBlockConfiguration": {
                  "BlockPublicAcls": true,
                  "BlockPublicPolicy": false,
                  "IgnorePublicAcls": true,
                  "RestrictPublicBuckets": false
                },
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ScreenshotsBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ScreenshotsBucket"
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Sid": "PublicReadThumbs",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": [
                        {
                          "Fn::Sub": "arn:aws:s3:::ppv1-screenshots-prod/inzint/*/thumb/*"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
              "Export": {
                "Name": "sls-ppv1-prod-ServerlessDeploymentBucketName"
              }
            },
            "ApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ"
              },
              "Export": {
                "Name": "sls-ppv1-prod-ApiLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-ppv1-prod-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-ppv1-prod-HttpApiUrl"
              }
            },
            "ScreenshotsBucketName": {
              "Value": "ppv1-screenshots-prod",
              "Export": {
                "Name": "ppv1-prod-ScreenshotsBucketName"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "api": {
          "handler": "src/lambda.handler",
          "events": [
            {
              "httpApi": {
                "method": "ANY",
                "path": "/{proxy+}"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/{proxy+}"
            },
            {
              "httpApi": {
                "method": "ANY",
                "path": "/"
              },
              "resolvedMethod": "ANY",
              "resolvedPath": "/"
            }
          ],
          "name": "ppv1-prod-api",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 3008,
          "timeout": 31,
          "runtime": "nodejs22.x",
          "vpc": {},
          "versionLogicalId": "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "build": {
        "esbuild": {
          "bundle": true,
          "platform": "node",
          "format": "cjs",
          "target": "node22",
          "sourcemap": true,
          "keepNames": true,
          "minify": false,
          "packages": "external"
        }
      },
      "custom": {
        "screenshotsBucket": "ppv1-screenshots-prod",
        "dotenv": {
          "logging": false
        },
        "serverless-offline": {
          "httpPort": 3001,
          "lambdaPort": 3002,
          "noPrependStageInUrl": true,
          "timeout": 60,
          "host": "0.0.0.0"
        }
      },
      "resources": {
        "Resources": {
          "ScreenshotsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "ppv1-screenshots-prod",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": false
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ScreenshotsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ScreenshotsBucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "PublicReadThumbs",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:s3:::ppv1-screenshots-prod/inzint/*/thumb/*"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ScreenshotsBucketName": {
            "Value": "ppv1-screenshots-prod",
            "Export": {
              "Name": "ppv1-prod-ScreenshotsBucketName"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "profile": "pp-api",
      "runtime": "nodejs22.x",
      "region": "ap-south-1",
      "stage": "prod",
      "memorySize": 3008,
      "timeout": 31,
      "logRetentionInDays": 14,
      "httpApi": {
        "cors": true
      },
      "tracing": {
        "lambda": true
      },
      "environment": {
        "NODE_OPTIONS": "--enable-source-maps",
        "STAGE": "prod",
        "PORT": "3001",
        "NODE_ENV": "development",
        "DATABASE_HOST": "aws-1-ap-south-1.pooler.supabase.com",
        "DATABASE_PORT": "6543",
        "DATABASE_USER": "postgres.wbqjfspfleboymnvkkte",
        "DATABASE_PASSWORD": "<REDACTED>",
        "DATABASE_NAME": "postgres",
        "JWT_SECRET": "<REDACTED>",
        "JWT_EXPIRATION": "7d",
        "SUPER_ADMIN_EMAIL": "admin@peopleparity.com",
        "SUPER_ADMIN_PASSWORD": "<REDACTED>",
        "SAML_ENTRY_POINT": "https://login.microsoftonline.com/383cc6fe-545e-4fab-8276-0c78ac6258f7/saml2",
        "SAML_ISSUER": "PeopleParity",
        "SAML_CLIENT_ID": "PeopleParity",
        "SAML_CALLBACK_URL": "http://localhost:3001/api/auth/saml/callback",
        "SAML_CERT": "-----BEGIN CERTIFICATE-----\nMIIC8DCCAdigAwIBAgIQcNr6w7TexKlOQiRcfM3EkTANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\nEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA4MjAxNzA4\nMDVaFw0yODA4MjAxNzA4MDVaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQg\nU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4B+KN+dY3vNS\nNOySyWE6KS90Eeg9TC54XpYrWZj/dKI0gtEcfvm2hSvqKfDX5pDLUBB/SOe00Gz0OELqDZ6Tgg78\nM5lyKNQHpxg7g0rnKzNpI+j2uc5gS9eMK27N1GQxpnS/GqpF3N4iXuQYP8X4s2yNTleRfmjttrHW\nf4YSlp9l5zGHjdt8cs+JaBNupcAxPKFh2vBBWkab95O+UpjsOv/E3BnIyp/+R+kXmyaHvSk5hAEG\n74UcMKmBrSUYpa0R+CTpIb6YtPMkzwYkESGoqtvQkNahaIAr0i94ZWC/H33gvaapqTO84GwUF/pJ\nzQkmCjTglK5V4OKMxuzA+N+wCQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQDGprNWc6nrUiEQmiF3\nNDgqumqmxhLafGe3iMFaEJhGkuZge4ZpiqU8AdaK6KYnvzZ8may/rm0uj5z4RIufs6hkAed0OVrC\nHTw2bVHqgwHc8iMXouy7gzz8tvn54yGq69rZkEWg3/spgvGFR1ZZudXHIPkQp5irLG9f63iyi1cF\nC2T0Wl5PgkGZVkM+s8hU0AiYshSYYd5i73IPNFEvDoLV69GqUU6RRobMUlm5oUuaNohht3+6ZRp7\ncfuxmh/dKbjYWc4jfB1/Na4YL+hmoaFRqtaY39AyLSQDkpvThq2Wgl55CbxKhlSnXlTao+4pDcBr\nXyQ9nY0Lnh+p0dOEqU8o\n-----END CERTIFICATE-----",
        "FRONTEND_URL": "http://localhost:5174"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": "arn:aws:s3:::ppv1-screenshots-prod"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject"
              ],
              "Resource": "arn:aws:s3:::ppv1-screenshots-prod/*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ppv1-prod-api",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "ppv1",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ppv1-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ppv1-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListBucket"
                        ],
                        "Resource": "arn:aws:s3:::ppv1-screenshots-prod"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:PutObject",
                          "s3:DeleteObject"
                        ],
                        "Resource": "arn:aws:s3:::ppv1-screenshots-prod/*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "xray:PutTraceSegments",
                          "xray:PutTelemetryRecords"
                        ],
                        "Resource": [
                          "*"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ppv1",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
                "S3Key": "serverless/ppv1/prod/1758375569731-2025-09-20T13:39:29.731Z/ppv1.zip"
              },
              "Handler": "src/lambda.handler",
              "Runtime": "nodejs22.x",
              "FunctionName": "ppv1-prod-api",
              "MemorySize": 3008,
              "Timeout": 31,
              "TracingConfig": {
                "Mode": "Active"
              },
              "Environment": {
                "Variables": {
                  "NODE_OPTIONS": "--enable-source-maps",
                  "STAGE": "prod",
                  "PORT": "3001",
                  "NODE_ENV": "development",
                  "DATABASE_HOST": "aws-1-ap-south-1.pooler.supabase.com",
                  "DATABASE_PORT": "6543",
                  "DATABASE_USER": "postgres.wbqjfspfleboymnvkkte",
                  "DATABASE_PASSWORD": "<REDACTED>",
                  "DATABASE_NAME": "postgres",
                  "JWT_SECRET": "<REDACTED>",
                  "JWT_EXPIRATION": "7d",
                  "SUPER_ADMIN_EMAIL": "admin@peopleparity.com",
                  "SUPER_ADMIN_PASSWORD": "<REDACTED>",
                  "SAML_ENTRY_POINT": "https://login.microsoftonline.com/383cc6fe-545e-4fab-8276-0c78ac6258f7/saml2",
                  "SAML_ISSUER": "PeopleParity",
                  "SAML_CLIENT_ID": "PeopleParity",
                  "SAML_CALLBACK_URL": "http://localhost:3001/api/auth/saml/callback",
                  "SAML_CERT": "-----BEGIN CERTIFICATE-----\nMIIC8DCCAdigAwIBAgIQcNr6w7TexKlOQiRcfM3EkTANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\nEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA4MjAxNzA4\nMDVaFw0yODA4MjAxNzA4MDVaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQg\nU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4B+KN+dY3vNS\nNOySyWE6KS90Eeg9TC54XpYrWZj/dKI0gtEcfvm2hSvqKfDX5pDLUBB/SOe00Gz0OELqDZ6Tgg78\nM5lyKNQHpxg7g0rnKzNpI+j2uc5gS9eMK27N1GQxpnS/GqpF3N4iXuQYP8X4s2yNTleRfmjttrHW\nf4YSlp9l5zGHjdt8cs+JaBNupcAxPKFh2vBBWkab95O+UpjsOv/E3BnIyp/+R+kXmyaHvSk5hAEG\n74UcMKmBrSUYpa0R+CTpIb6YtPMkzwYkESGoqtvQkNahaIAr0i94ZWC/H33gvaapqTO84GwUF/pJ\nzQkmCjTglK5V4OKMxuzA+N+wCQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQDGprNWc6nrUiEQmiF3\nNDgqumqmxhLafGe3iMFaEJhGkuZge4ZpiqU8AdaK6KYnvzZ8may/rm0uj5z4RIufs6hkAed0OVrC\nHTw2bVHqgwHc8iMXouy7gzz8tvn54yGq69rZkEWg3/spgvGFR1ZZudXHIPkQp5irLG9f63iyi1cF\nC2T0Wl5PgkGZVkM+s8hU0AiYshSYYd5i73IPNFEvDoLV69GqUU6RRobMUlm5oUuaNohht3+6ZRp7\ncfuxmh/dKbjYWc4jfB1/Na4YL+hmoaFRqtaY39AyLSQDkpvThq2Wgl55CbxKhlSnXlTao+4pDcBr\nXyQ9nY0Lnh+p0dOEqU8o\n-----END CERTIFICATE-----",
                  "FRONTEND_URL": "http://localhost:5174"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "13R/YvqVKVfbv/Gnj5FJ4WVKf8ydO+GRoP9xvN2joPE="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "prod-ppv1",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "GET",
                  "POST",
                  "PUT",
                  "PATCH",
                  "HEAD",
                  "DELETE"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteAnyProxyVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /{proxy+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteAny": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "ScreenshotsBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "ppv1-screenshots-prod",
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": false
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ScreenshotsBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ScreenshotsBucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Sid": "PublicReadThumbs",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": [
                      {
                        "Fn::Sub": "arn:aws:s3:::ppv1-screenshots-prod/inzint/*/thumb/*"
                      }
                    ]
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
            "Export": {
              "Name": "sls-ppv1-prod-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ"
            },
            "Export": {
              "Name": "sls-ppv1-prod-ApiLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-ppv1-prod-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-ppv1-prod-HttpApiUrl"
            }
          },
          "ScreenshotsBucketName": {
            "Value": "ppv1-screenshots-prod",
            "Export": {
              "Name": "ppv1-prod-ScreenshotsBucketName"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "service: ppv1\nframeworkVersion: \"4\"\nuseDotenv: true\n\nprovider:\n  name: aws\n  profile: pp-api\n  runtime: nodejs22.x\n  region: ap-south-1\n  stage: ${opt:stage, 'dev'}\n  memorySize: 3008\n  timeout: 31\n  logRetentionInDays: 14\n  httpApi:\n    cors: true\n  tracing:\n    lambda: true\n  environment:\n    # Node / Server\n    NODE_OPTIONS: --enable-source-maps\n    STAGE: ${sls:stage}\n    PORT: ${env:PORT}\n    NODE_ENV: ${env:NODE_ENV}\n\n    # Database\n    DATABASE_HOST: ${env:DATABASE_HOST}\n    DATABASE_PORT: ${env:DATABASE_PORT}\n    DATABASE_USER: ${env:DATABASE_USER}\n    DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}\n    DATABASE_NAME: ${env:DATABASE_NAME}\n\n    # JWT\n    JWT_SECRET: ${env:JWT_SECRET}\n    JWT_EXPIRATION: ${env:JWT_EXPIRATION}\n\n    # Super Admin\n    SUPER_ADMIN_EMAIL: ${env:SUPER_ADMIN_EMAIL}\n    SUPER_ADMIN_PASSWORD: ${env:SUPER_ADMIN_PASSWORD}\n\n    # SAML\n    SAML_ENTRY_POINT: ${env:SAML_ENTRY_POINT}\n    SAML_ISSUER: ${env:SAML_ISSUER}\n    SAML_CLIENT_ID: ${env:SAML_CLIENT_ID}\n    SAML_CALLBACK_URL: ${env:SAML_CALLBACK_URL}\n    SAML_CERT: ${env:SAML_CERT}\n\n    # Frontend URL\n    FRONTEND_URL: ${env:FRONTEND_URL}\n\n  # Lambda execution role permissions (scoped to this stage's bucket)\n  iam:\n    role:\n      statements:\n        - Effect: Allow\n          Action:\n            - s3:ListBucket\n          Resource:\n            - arn:aws:s3:::${self:custom.screenshotsBucket}\n        - Effect: Allow\n          Action:\n            - s3:GetObject\n            - s3:PutObject\n            - s3:DeleteObject\n            # (add s3:PutObjectAcl if you ever set ACLs)\n          Resource:\n            - arn:aws:s3:::${self:custom.screenshotsBucket}/*\n\nfunctions:\n  api:\n    handler: src/lambda.handler\n    events:\n      - httpApi:\n          method: ANY\n          path: \"/{proxy+}\"\n      - httpApi:\n          method: ANY\n          path: \"/\"\n\nplugins:\n  - serverless-offline\n\n# Built-in Serverless v4 builder\nbuild:\n  esbuild:\n    bundle: true\n    platform: node\n    format: cjs\n    target: node22\n    sourcemap: true\n    keepNames: true\n    minify: false\n    packages: external\n\ncustom:\n  screenshotsBucket: ${self:service}-screenshots-${sls:stage}\n\n  dotenv:\n    logging: false\n\n  serverless-offline:\n    httpPort: 3001\n    lambdaPort: 3002\n    noPrependStageInUrl: true\n    timeout: 60\n    host: 0.0.0.0\n\nresources:\n  Resources:\n    ScreenshotsBucket:\n      Type: AWS::S3::Bucket\n      # DeletionPolicy: Retain # keep data if stack is removed\n      # UpdateReplacePolicy: Retain\n      Properties:\n        BucketName: ${self:custom.screenshotsBucket}\n        PublicAccessBlockConfiguration:\n          BlockPublicAcls: true\n          BlockPublicPolicy: false\n          IgnorePublicAcls: true\n          RestrictPublicBuckets: false\n        BucketEncryption:\n          ServerSideEncryptionConfiguration:\n            - ServerSideEncryptionByDefault:\n                SSEAlgorithm: AES256\n\n    ScreenshotsBucketPolicy:\n      Type: AWS::S3::BucketPolicy\n      Properties:\n        Bucket: !Ref ScreenshotsBucket\n        PolicyDocument:\n          Version: \"2012-10-17\"\n          Statement:\n            # Public read for ONLY thumbnails under inzint/*/thumb/*\n            - Sid: PublicReadThumbs\n              Effect: Allow\n              Principal: \"*\"\n              Action: s3:GetObject\n              Resource:\n                - !Sub arn:aws:s3:::${self:custom.screenshotsBucket}/inzint/*/thumb/*\n\n  Outputs:\n    ScreenshotsBucketName:\n      Value: ${self:custom.screenshotsBucket}\n      Export:\n        Name: ${self:service}-${sls:stage}-ScreenshotsBucketName\n",
    "command": [
      "deploy"
    ],
    "options": {
      "aws-profile": "pp-api",
      "stage": "prod"
    },
    "orgId": "41bacf36-57dd-4c88-951a-5deb47ab05ab",
    "orgName": "socialmediaautomation",
    "userId": "pHsfZxFT3xTb3gQ7Tf",
    "userName": "socialmediaautomation",
    "serviceProviderAwsAccountId": "957634529359",
    "serviceProviderAwsCfStackName": "ppv1-prod",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:957634529359:stack/ppv1-prod/06d94a30-8dc6-11f0-88ce-06a8c9feeb47",
    "serviceProviderAwsCfStackCreated": "2025-09-09T21:43:30.701Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-20T13:28:32.113Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "ApiLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:957634529359:function:ppv1-prod-api:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-ppv1-prod-ApiLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ScreenshotsBucketName",
        "OutputValue": "ppv1-screenshots-prod",
        "ExportName": "ppv1-prod-ScreenshotsBucketName"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "efr76g502g",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-ppv1-prod-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
        "ExportName": "sls-ppv1-prod-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://efr76g502g.execute-api.ap-south-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-ppv1-prod-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "ApiLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/ppv1-prod-api",
            "RetentionInDays": 14
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "ppv1",
                      "prod",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ppv1-prod*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ppv1-prod*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:ListBucket"
                      ],
                      "Resource": "arn:aws:s3:::ppv1-screenshots-prod"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject",
                        "s3:DeleteObject"
                      ],
                      "Resource": "arn:aws:s3:::ppv1-screenshots-prod/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "xray:PutTraceSegments",
                        "xray:PutTelemetryRecords"
                      ],
                      "Resource": [
                        "*"
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "ppv1",
                  "prod",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "ApiLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
              "S3Key": "serverless/ppv1/prod/1758375569731-2025-09-20T13:39:29.731Z/ppv1.zip"
            },
            "Handler": "src/lambda.handler",
            "Runtime": "nodejs22.x",
            "FunctionName": "ppv1-prod-api",
            "MemorySize": 3008,
            "Timeout": 31,
            "TracingConfig": {
              "Mode": "Active"
            },
            "Environment": {
              "Variables": {
                "NODE_OPTIONS": "--enable-source-maps",
                "STAGE": "prod",
                "PORT": "3001",
                "NODE_ENV": "development",
                "DATABASE_HOST": "aws-1-ap-south-1.pooler.supabase.com",
                "DATABASE_PORT": "6543",
                "DATABASE_USER": "postgres.wbqjfspfleboymnvkkte",
                "DATABASE_PASSWORD": "<REDACTED>",
                "DATABASE_NAME": "postgres",
                "JWT_SECRET": "<REDACTED>",
                "JWT_EXPIRATION": "7d",
                "SUPER_ADMIN_EMAIL": "admin@peopleparity.com",
                "SUPER_ADMIN_PASSWORD": "<REDACTED>",
                "SAML_ENTRY_POINT": "https://login.microsoftonline.com/383cc6fe-545e-4fab-8276-0c78ac6258f7/saml2",
                "SAML_ISSUER": "PeopleParity",
                "SAML_CLIENT_ID": "PeopleParity",
                "SAML_CALLBACK_URL": "http://localhost:3001/api/auth/saml/callback",
                "SAML_CERT": "-----BEGIN CERTIFICATE-----\nMIIC8DCCAdigAwIBAgIQcNr6w7TexKlOQiRcfM3EkTANBgkqhkiG9w0BAQsFADA0MTIwMAYDVQQD\nEylNaWNyb3NvZnQgQXp1cmUgRmVkZXJhdGVkIFNTTyBDZXJ0aWZpY2F0ZTAeFw0yNTA4MjAxNzA4\nMDVaFw0yODA4MjAxNzA4MDVaMDQxMjAwBgNVBAMTKU1pY3Jvc29mdCBBenVyZSBGZWRlcmF0ZWQg\nU1NPIENlcnRpZmljYXRlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4B+KN+dY3vNS\nNOySyWE6KS90Eeg9TC54XpYrWZj/dKI0gtEcfvm2hSvqKfDX5pDLUBB/SOe00Gz0OELqDZ6Tgg78\nM5lyKNQHpxg7g0rnKzNpI+j2uc5gS9eMK27N1GQxpnS/GqpF3N4iXuQYP8X4s2yNTleRfmjttrHW\nf4YSlp9l5zGHjdt8cs+JaBNupcAxPKFh2vBBWkab95O+UpjsOv/E3BnIyp/+R+kXmyaHvSk5hAEG\n74UcMKmBrSUYpa0R+CTpIb6YtPMkzwYkESGoqtvQkNahaIAr0i94ZWC/H33gvaapqTO84GwUF/pJ\nzQkmCjTglK5V4OKMxuzA+N+wCQIDAQABMA0GCSqGSIb3DQEBCwUAA4IBAQDGprNWc6nrUiEQmiF3\nNDgqumqmxhLafGe3iMFaEJhGkuZge4ZpiqU8AdaK6KYnvzZ8may/rm0uj5z4RIufs6hkAed0OVrC\nHTw2bVHqgwHc8iMXouy7gzz8tvn54yGq69rZkEWg3/spgvGFR1ZZudXHIPkQp5irLG9f63iyi1cF\nC2T0Wl5PgkGZVkM+s8hU0AiYshSYYd5i73IPNFEvDoLV69GqUU6RRobMUlm5oUuaNohht3+6ZRp7\ncfuxmh/dKbjYWc4jfB1/Na4YL+hmoaFRqtaY39AyLSQDkpvThq2Wgl55CbxKhlSnXlTao+4pDcBr\nXyQ9nY0Lnh+p0dOEqU8o\n-----END CERTIFICATE-----",
                "FRONTEND_URL": "http://localhost:5174"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ApiLogGroup"
          ]
        },
        "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApiLambdaFunction"
            },
            "CodeSha256": "13R/YvqVKVfbv/Gnj5FJ4WVKf8ydO+GRoP9xvN2joPE="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "prod-ppv1",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent",
                "X-Amzn-Trace-Id"
              ],
              "AllowMethods": [
                "OPTIONS",
                "GET",
                "POST",
                "PUT",
                "PATCH",
                "HEAD",
                "DELETE"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "ApiLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationApi": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ApiLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteAnyProxyVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "ANY /{proxy+}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationApi"
        },
        "HttpApiRouteAny": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "ANY /",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationApi"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationApi"
        },
        "ScreenshotsBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "ppv1-screenshots-prod",
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": false,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": false
            },
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }
          }
        },
        "ScreenshotsBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "ScreenshotsBucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "PublicReadThumbs",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::ppv1-screenshots-prod/inzint/*/thumb/*"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-south-1-c597c975-9d49",
          "Export": {
            "Name": "sls-ppv1-prod-ServerlessDeploymentBucketName"
          }
        },
        "ApiLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApiLambdaVersionNoJqLsh5mDqpL3dCpUOk9hvvBfdUz8sRhGygoaZPZQ"
          },
          "Export": {
            "Name": "sls-ppv1-prod-ApiLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-ppv1-prod-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-ppv1-prod-HttpApiUrl"
          }
        },
        "ScreenshotsBucketName": {
          "Value": "ppv1-screenshots-prod",
          "Export": {
            "Name": "ppv1-prod-ScreenshotsBucketName"
          }
        }
      }
    }
  }
}